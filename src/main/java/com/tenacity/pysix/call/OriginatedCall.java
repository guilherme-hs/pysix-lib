package com.tenacity.pysix.call;

import com.google.common.base.Objects;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

import static com.google.common.base.Preconditions.checkNotNull;

/**
 * Created with IntelliJ IDEA.
 * User: guilherme
 * Date: 7/24/13
 * Time: 9:18 AM
 * Represents a Originated call
 */
@Entity
public class OriginatedCall {

    private static final int MIN_TIMEOUT = 0;
    private static final int DEFAULT_TIMEOUT = 30;
    private static final String DEFAULT_CONTEXT = "default";
    /**
     * Id of the originate call, generated by the database
     */
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private long id;

    /**
     * Origin of the call, will be the first party connected
     * must be a channel if the originContext is equal o null, an extension if not
     */
    private String origin;

    /**
     * Context to be used for the origination of the origin call
     */
    private String originContext;

    /**
     * Destination of the call, will be the second party connected
     */
    private String destination;

    /**
     * Context to be used for the origination of the destination call
     */
    private String destinationContext;

    /**
     * Max time for the origin to answer the call
     */
    private long timeout;

    /**
     * Id of the first call
     */
    private String originalCallId;
//    /**
//     * Id of the second call
//     */
//    private String destinationCallId;

    public OriginatedCall(){}

    /**
     * Static factory for the originated call
     * @param origin - Origin of the call, will be the first party connected, must be a channel if originContext is null, must be a number otherwise, cannot be null
     * @param originContext - Context to be used on the origination of the origin call
     * @param destination - Destination of the call, will be the second party connected, cannot be null
     * @param destinationContext - Context to be used on the origination of the destination call
     * @param timeout - timeout of the call
     * @return Originated call with the given parameters set
     */
    public static OriginatedCall getInstance(String origin, String originContext, String destination, String destinationContext, long timeout){
        return (new OriginatedCallBuilder(origin,originContext,destination,destinationContext,timeout)).build();
    }

    public OriginatedCall(OriginatedCallBuilder originatedCallBuilder){
        this.id = originatedCallBuilder.id;
        this.origin = originatedCallBuilder.origin;
        this.originContext = originatedCallBuilder.originContext;
        this.destination = originatedCallBuilder.destination;
        this.destinationContext = originatedCallBuilder.destinationContext;
        this.timeout = originatedCallBuilder.timeout;
        this.originalCallId = originatedCallBuilder.originalCallId;
        //this.destinationCallId = originatedCallBuilder.destinationCallId;
    }

    public final long getId() {
        return id;
    }

    public final String getOrigin() {
        return origin;
    }

    public final String getDestination() {
        return destination;
    }

    public String getOriginContext() {
        return originContext;
    }

    public String getDestinationContext() {
        return destinationContext;
    }

    public final long getTimeout() {
        return timeout;
    }

    public final String getOriginalCallId() {
        return originalCallId;
    }

//    public final String getDestinationCallId() {
//        return destinationCallId;
//    }

    @Override
    public int hashCode() {
        return Objects.hashCode(id, origin, originContext, destination, destinationContext, timeout, originalCallId);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null || getClass() != obj.getClass()) {
            return false;
        }
        final OriginatedCall other = (OriginatedCall) obj;
        return Objects.equal(this.id, other.id) && Objects.equal(this.origin, other.origin) && Objects.equal(this.originContext, other.originContext) && Objects.equal(this.destination, other.destination) && Objects.equal(this.destinationContext, other.destinationContext) && Objects.equal(this.timeout, other.timeout) && Objects.equal(this.originalCallId, other.originalCallId);
    }

    @Override
    public String toString() {
        return Objects.toStringHelper(this)
                .add("id", id)
                .add("origin", origin)
                .add("originContext", originContext)
                .add("destination", destination)
                .add("destinationContext", destinationContext)
                .add("timeout", timeout)
                .add("originalCallId", originalCallId)
                .toString();
    }

    public static final class OriginatedCallBuilder{

        private final String origin;
        private final String originContext;
        private final String destination;
        private final String destinationContext;
        private final long timeout;

        private long id;
        private String originalCallId;
        //private String destinationCallId;

        public OriginatedCallBuilder(String origin,String originContext, String destination,
                                     String destinationContext, long timeout){
            checkNotNull(origin);
            checkNotNull(destination);
            this.origin = origin;
            this.originContext = originContext;
            this.destination = destination;
            if (destinationContext == null) {
                this.destinationContext = DEFAULT_CONTEXT;
            } else {
                this.destinationContext = destinationContext;
            }
            if(timeout <= MIN_TIMEOUT){
                this.timeout = DEFAULT_TIMEOUT;
            } else {
                this.timeout = timeout;
            }
        }

        public OriginatedCallBuilder(OriginatedCall originatedCall){
            this.id = originatedCall.id;
            this.origin = originatedCall.origin;
            this.originContext = originatedCall.originContext;
            this.destination = originatedCall.destination;
            this.destinationContext = originatedCall.destinationContext;
            this.timeout = originatedCall.timeout;
            this.originalCallId = originatedCall.originalCallId;
            //this.destinationCallId = originatedCall.destinationCallId;
        }

        public OriginatedCallBuilder originalCallId(String originalCallId){
            this.originalCallId = originalCallId;
            return this;
        }

//        public OriginatedCallBuilder destinationCallId(String destinationCallId){
//            this.destinationCallId = destinationCallId;
//            return this;
//        }

        public OriginatedCall build(){
            return new OriginatedCall(this);
        }

    }
}
